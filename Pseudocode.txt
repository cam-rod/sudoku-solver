# Cameron Rodriguez
# Date
# This program will dynamically solve a sudoku grid.

Initialize grid and temp_predictions as arrays
Initialize predictions as a 3D array, with 9 empty elements within each of 9 empty elements
Initialize y and x as integers

Define function inner_grid(y, x, grid)
    Initialize inner_values as an array
    Initialize inner_x and inner_y as integers

    Calculate inner_y as y % 3
    Calculate inner_x as x % 3

    If inner_y is 0 and inner_x is 0, append the values of grid spaces up to 2 spaces down and 2 spaces right to inner_values
    Else if inner_y is 0 and inner_x is 1, append the values of grid spaces up to 2 spaces down and 1 space left and right to inner_values
    Else if inner_y is 0 and inner_x is 2, append the values of grid spaces up to 2 spaces down and 2 spaces left to inner_values
    Else if inner_y is 1 and inner_x is 0, append the values of grid spaces up to 1 space up and down and 2 spaces right to inner_values
    Else if inner_y is 1 and inner_x is 1, append the values of grid spaces up to 1 space up and down and 1 space left and right to inner_values
    Else if inner_y is 1 and inner_x is 2, append the values of grid spaces up to 1 space up and down and 2 spaces left to inner_values
    Else if inner_y is 2 and inner_x is 0, append the values of grid spaces up to 2 spaces up and 2 spaces right to inner_values
    Else if inner_y is 2 and inner_x is 1, append the values of grid spaces up to 2 spaces up and 1 space left and right to inner_values
    Else if inner_y is 2 and inner_x is 2, append the values of grid spaces up to 2 spaces up and 2 spaces left to inner_values

    Return inner_values

Define clear_predictions()
    For y in predictions
        For x in predictions[y]
            Set predictions[y][x][0] to an array

    Return predictions

Define function load_game()
    Initialize game_text and inner as an array

    Request the filename from the user
    Open the file from the indicated location in "r" mode as game_raw
    Read game_raw, split at newline characters, into the 2D array game_text
    Split game_text by characters into the 3D array grid

    For y in grid
        For x in grid[y] 
            Append 1 to grid[y][x] if grid[y][x][0] is a non-zero number, or append 0 if it is zero, or return 'invalid' if it is not a number
   
    If all characters in game_text are 0, restart the loop
    If the length of grid is not 9, restart the loop
    If the length of grid[0] is not 9, restart the loop
    
    For y in grid
        For x in grid[y]
            return 'repeat' if the value of grid[y][x][0] appears in the same row or column, unless the value is 0
            return 'repeat' if the value of grid[y][x][0] appears in the 3x3 grid list returned by inner_grid(y, x, grid)

    Return grid

Define mandatory_values(grid)
    For y in grid
        For x in grid[y]
            Append any non-zero value not found in the same row to temp_predictions and to predictions[y][x]
            If there is one number in temp_predictions, set that value permanently to grid[y][x], run clear_predictions(predictions), and run recursion on mandatory_values(grid)
            Else clear temp_predictions
            
            Append any non-zero value not found in the same column to temp_predictions and to predictions[y][x]
            If there is one number in temp_predictions, set that value permanently to grid[y][x], run clear_predictions(predictions), and run recursion on mandatory_values(grid)
            Else clear temp_predictions
            
            Append any non-zero value not found in the 3x3 grid from inner_grid(y, x, grid) to temp_predictions and to predictions[y][x]
            If there is one number in temp_predictions, set that value permanently to grid[y][x], run clear_predictions(predictions), and run recursion on mandatory_values(grid)
            Else clear temp_predictions

            Remove duplicates with set(predictions[y][x])
      
    For each row in grid
        Append the first value in each element of the row to temp_predictions
        If any non-zero number appears once in temp_predictions, find the spot in grid and set it permanently to that value, run clear_predictions(predictions), and run recursion on mandatory_values(grid)
        Else continue

    For each column in grid
        Append the first value in each element of the column to temp_predictions
        If any non-zero number appears once in temp_predictions, find the spot in grid and set it permanently to that value, run clear_predictions(predictions), and run recursion on mandatory_values(grid)
        Else continue
    
    For y in range(3)
        For x in range(3)
            Set temp predictions to the values returned by inner_grid(y, x, grid)
            If any non-zero number appears once in temp_predictions, find the spot in grid and set it permanently to that value, run clear_predictions(predictions), and run recursion on mandatory_values(grid)
            Else continue

    Return grid