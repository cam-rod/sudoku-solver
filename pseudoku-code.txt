# Cameron Rodriguez
# April 25, 2019
# This program will dynamically solve a sudoku grid.

Import re and tkinter as tk

Initialize grid and predictions as a 3D array, with 9 empty elements within each of 9 empty elements
Initialize temp_predictions, result, and values as arrays
Initialize y and x as integers; grid locations as a string; successful as False; end_screen and root as None

Define function check(region, y, x, grid)
    Initialize inner_x and inner_y as integers
    
    If region is '3x3' , set values to a list of all other spaces in the grid by using modulo to find the relative position of the current space within it
    If region is 'row', set values to a list of all spaces in the same row, and then remove the current spot
    If region is 'column', set values to a list of all spaces in the same row, and then remove the current spot
    
    Return values

Define function load_grid()
    Initialize grid_text as an array
    Request for file_location, then open the file, and read and split lines into grid_text

    Return False if there are not 9 rows, 9 columns, or if all spaces are 0
    Split each space of grid_text into an element of grid, then append 1 if the space is prefilled or 0 otherwise
    For each space, return False if a number is repeated in a row, column, or 3x3 grid by using check()
    
    Return [grid_location, grid]

Define mandatory_predictions(grid, predictions, successful, form)    
    For each row/column as defined by form, initialize temp_predictions as an array and append the predictions of each non-permanent space in the row/column to temp_predictions
        If any non-zero number appears once in temp_predictions, find the space
            If the space is not a permanent number, permanently set that number, clear predictions and run mandatory_values()
        Break loops at any point if successful is True

    Return [grid, predictions, successful]

Define mandatory_values(grid, predictions, successful)
    Initialize temp_predictions as an array; updated as False

    For each spot in grid, add any number not found in the row to temp_predictions and predictions
        If only one number is not found, permanently set grid to that number and updated to True
        Repeat for columns and 3x3 grids, but if only one number is not found, clear predictions for that spot

    If updated is true, clear all predictions and recursively call mandatory_values()
          
    Call mandatory_predictions('row')
    If successful is not True, call mandatory_predictions('column')
    
    Return [grid, predictions, True]

Define fill_grid(grid, predictions)
    Initialize final_grid as an array

    For each spot in grid, skip if the number is permanent
        For each prediction for the spot, pass if it is already included in the row/column/3x3 grid using check()
            Else set the spot to that prediction and run fill_grid() with the updated grid
            If final_grid[0] is True, return final_grid
        If no prediction works, set that spot to 0 and return [False]

    Return [True, grid]

Define class DeliverResult(tk.Frame)
    Define __init__(self, grid, grid_location, successful, master=None)
        Set self.grid to grid, self.grid_location to grid_location, and self.successful to successful
        Initialize tk.Frame and call self.create_window()
    
    Define create_window(self):
        Set the window to stay on top, with a white background and a sudoku grid as the logo
        If successful is True, set self.grid_location to self.grid_location[:-4]+'_solution.txt', then save grid to that file location
            Set the window title to 'Solution' and for each spot, center it in a Label its respective grid within the window, with a black border
            Add a Label to the bottom indicating the save location of the file, and a button to the right that closes the window
        If successful is false, set the window title to 'Invalid Solution'
            Create a Label indicating the puzzle cannot be solved, and a button below to close the window

Set grid to the returned value of load_grid()
If grid is False, set root to tk.Tk(), create an end_screen object for DeliverResult(), and run endscreen.mainloop()
Else set grid_location and grid to the elements of grid
    Set grid, predictions and successful to the returned value of mandatory_values(), then set successful to False
    Set result to the returned value of fill_grid(grid, predictions)
    If result[0] is True, set successful and grid to the elements of result

    Create an end_screen object for DeliverResult(), and run endscreen.mainloop()
