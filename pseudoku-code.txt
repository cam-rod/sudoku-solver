# Cameron Rodriguez
# April 8, 2019
# This program will dynamically solve a sudoku grid.

Initialize grid and predictions as a 3D array, with 9 empty elements within each of 9 empty elements
Initialize temp_predictions, result, and values as arrays
Initialize y and x as integers
Initialize grid_location as a string

Define function check(region, y, x, grid)
    Initialize inner_x and inner_y as integers
    
    If region is '3x3'
        Calculate inner_y as y % 3
        Calculate inner_x as x % 3

        If inner_y is 0 and inner_x is 0, append the values of grid spaces up to 2 spaces down and 2 spaces right to values
        Else if inner_y is 0 and inner_x is 1, append the values of grid spaces up to 2 spaces down and 1 space left and right to values
        Else if inner_y is 0 and inner_x is 2, append the values of grid spaces up to 2 spaces down and 2 spaces left to values
        Else if inner_y is 1 and inner_x is 0, append the values of grid spaces up to 1 space up and down and 2 spaces right to values
        Else if inner_y is 1 and inner_x is 1, append the values of grid spaces up to 1 space up and down and 1 space left and right to values
        Else if inner_y is 1 and inner_x is 2, append the values of grid spaces up to 1 space up and down and 2 spaces left to values
        Else if inner_y is 2 and inner_x is 0, append the values of grid spaces up to 2 spaces up and 2 spaces right to values
        Else if inner_y is 2 and inner_x is 1, append the values of grid spaces up to 2 spaces up and 1 space left and right to values
        Else if inner_y is 2 and inner_x is 2, append the values of grid spaces up to 2 spaces up and 2 spaces left to values

        Return values

    If region is 'row'
        Append all numbers in the row to values
        Remove values[x]
        Return values

    If region is 'column'
        Append all numbers in the column to values
        Remove values[y]
        Return values

Define function load_grid()
    Initialize grid_text as an array

    Request the filename from the user as grid_location
    Open the file from grid_location in "r" mode as grid_raw
    Read grid_raw, split at newline characters, into the array grid_text
    Close grid_raw

    If the length of grid_text is not 9, return False
    If the length of each line of grid_text is not 9, return False
    If all characters in grid_text are 0, return False

    Split grid_text by characters into the 3D array grid

    For y in length of grid
        For x in length of grid[y] 
            Append 1 to grid[y][x] if grid[y][x][0] is a non-zero number, or append 0 if it is zero, or return 'invalid' if it is not a number
    
    For y in length of grid
        For x in length of grid[y]
            return False if the value of grid[y][x][0] appears in the same row or column, unless the value is 0
            return False if the value of grid[y][x][0] appears in the 3x3 grid list returned by check('grid', y, x, grid)

    Return [grid_location, grid]

Define mandatory_predictions(grid, predictions, successful, form)
    Append the predictions of each element of the row/column to temp_predictions (decided by type)
    If any non-zero number appears once in temp_predictions, find the spot in grid and set it permanently to that value, reset predictions, and run recursion on mandatory_values(grid, predictions)
    Else continue
    Break program if successful is True
    
    return [grid, predictions, successful]

Define mandatory_values(grid, predictions, successful)
    For y in length of grid
        For x in length of grid[y]
            Append any non-zero value not found in the same row to temp_predictions and to predictions[y][x]
            If there is one number in temp_predictions, set that value permanently to grid[y][x], reset predictions, and run recursion on mandatory_values(grid, predictions)
            Else clear temp_predictions
            
            Append any non-zero value not found in the same column to temp_predictions and to predictions[y][x]
            If there is one number in temp_predictions, set that value permanently to grid[y][x], reset predictions, and run recursion on mandatory_values(grid, predictions)
            Else clear temp_predictions
            
            Append any non-zero value not found in the 3x3 grid from check('grid', y, x, grid) to temp_predictions and to predictions[y][x]
            If there is one number in temp_predictions, set that value permanently to grid[y][x], reset predictions, and run recursion on mandatory_values(grid, predictions)
            Else clear temp_predictions

            Remove duplicates with set(predictions[y][x])
      
    For each row in grid
        Call mandatory_predictions(grid, predictions, successful, 'row')

    For each column in grid
        Call mandatory_predictions(grid, predictions, successful, 'column')
    
    Return [grid, predictions, True]

Define fill_grid(grid, predictions)
    Initialize final_grid as an array

    For y in length of grid
        For x in length of grid[y]
            Continue if grid[y][x][0] is not 0

            For p in length of predictions[y][x]
                If the value of grid[y][x][0] is repeated in the row, continue loop
                If the value of grid[y][x][0] is repeated in the column, continue loop
                If the value of grid[y][x][0] is repeated in its 3x3 surrounding grid as returned by check('grid', y, x, grid), continue loop
                Set grid[y][x][0] to predictions[y][x][p]

                
                Set final_grid to the returned value of fill_grid(grid, predictions)

                If final_grid[0] is True, return final_grid
                Else continue
            
            Return [False]
    
    Return [True, grid]

Define deliver_result(successful, *grid_location)
    If successful is True
        Set grid_location to grid_location[:-4]+'_solution'+grid_location[-4:]
        Open the file at grid_location in 'w' mode as solution_grid
        For y in length of grid
            For x in length of grid[y]
                Write the casted string of grid[y][x][0] to solution_grid
            Write '\n' if y is not 8
        
        Close solution_grid

        Initialize a centered Tkinter window as result

        For y in length of grid
            For x in length of grid[y]
                Add a tkinter grid widget in column=x and row=y with string of grid[y][x][0] inside

        Add a grid widget stretched across the bottom row with the text 'Solution saved to {}.'.format(grid_location)

        Launch the window result

    Else print 'The sudoku puzzle inputted cannot be solved.'

Set grid_location, grid to the returned value of load_grid()

If grid is False, call deliver_result(False)

Set grid, predictions to the returned value of mandatory_values(grid)
Set result to the returned value of fill_grid(grid, predictions)

If result[0] is True, set grid to result[1] and call deliver_result(True, grid_location)
Else call deliver_result(False)
