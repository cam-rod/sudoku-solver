# Cameron Rodriguez
# Date
# This program will dynamically solve a sudoku grid.

Initialize grid and predictions as a 3D array, with 9 empty elements within each of 9 empty elements
Initialize temp_predictions, result, and values as arrays
Initialize y and x as integers; grid locations as a string; successful as False; end_screen and root as None

Define function check(region, y, x, grid)
    Initialize inner_x and inner_y as integers
    
    If region is '3x3' , set values to a list of all other spaces in the grid by using modulo to find the relative position of the current space within it
    If region is 'row', set values to a list of all spaces in the same row, and then remove the current spot
    If region is 'column', set values to a list of all spaces in the same row, and then remove the current spot
    
    Return values

Define function load_grid()
    Initialize grid_text as an array
    Request for file_location, then open the file, and read and split lines into grid_text

    Return False if there are not 9 rows, 9 columns, or if all spaces are 0
    Split each space of grid_text into an element of grid, then append 1 if the space is prefilled or 0 otherwise
    For each space, return False if a number is repeated in a row, column, or 3x3 grid by using check()
    
    Return [grid_location, grid]

Define mandatory_predictions(grid, predictions, successful, form)    
    For each row/column as defined by form, initialize temp_predictions as an array and append the predictions of each non-permanent space in the row/column to temp_predictions
    If any non-zero number appears once in temp_predictions, find the space
    If the space is not a permanent number, permanently set that number, clear predictions and run mandatory_values()
    
    Break loops at any point if successful is True
    Return [grid, predictions, successful]

Define mandatory_values(grid, predictions, successful)
    Initialize temp_predictions as an array; updated as False
      
    For each row in grid
        Call mandatory_predictions(grid, predictions, successful, 'row')

    For each column in grid
        Call mandatory_predictions(grid, predictions, successful, 'column')
    
    Return [grid, predictions, True]

Define fill_grid(grid, predictions)
    Initialize final_grid as an array

    For y in length of grid
        For x in length of grid[y]
            Continue if grid[y][x][0] is not 0

            For p in length of predictions[y][x]
                If the value of grid[y][x][0] is repeated in the row, continue loop
                If the value of grid[y][x][0] is repeated in the column, continue loop
                If the value of grid[y][x][0] is repeated in its 3x3 surrounding grid as returned by check('grid', y, x, grid), continue loop
                Set grid[y][x][0] to predictions[y][x][p]

                
                Set final_grid to the returned value of fill_grid(grid, predictions)

                If final_grid[0] is True, return final_grid
                Else continue
            
            Return [False]
    
    Return [True, grid]

Define class deliver_result()
    Initialize a centered Tkinter window as result
    
    If successful is True
        Set grid_location to grid_location[:-4]+'_solution'+grid_location[-4:]
        Open the file at grid_location in 'w' mode as solution_grid
        For y in length of grid
            For x in length of grid[y]
                Write the casted string of grid[y][x][0] to solution_grid
            Write '\n' if y is not 8
        
        Close solution_grid

        Initialize a centered Tkinter window as result

        For y in length of grid
            For x in length of grid[y]
                Add a tkinter grid widget in column=x and row=y with string of grid[y][x][0] inside

        Add a grid widget stretched across the bottom row with the text 'Solution saved to {}.'.format(grid_location)

        Launch the window result

    Else print 'The sudoku puzzle inputted cannot be solved.'

Set grid to the returned value of load_grid()
If grid is False, call deliver_result(False)
Else set grid_location to grid[0] and grid to grid[1]

Set grid, predictions to the returned value of mandatory_values(grid)
Set result to the returned value of fill_grid(grid, predictions)

If result[0] is True, set grid to result[1] and call deliver_result(True, grid_location)
Else call deliver_result(False)
